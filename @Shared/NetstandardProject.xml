<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetstandardProject</name>
    </assembly>
    <members>
        <member name="T:Shared.Attributes.MaybeNull">
            <summary>
            Parameter attribute. Given parameter can be null.
            </summary>
        </member>
        <member name="T:Shared.Attributes.NeverNull">
            <summary>
            Parameter attribute. Given parameter must not be null.
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.IsTypeCompatible(System.Type,System.Type)">
            <summary>
            Checks if right type can be assigned to left type. <br/>
            Works similiar to IsAssignableFrom, but will returns false for ValueTypes (which need boxing) and void (which overflows the stack).     
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Find index in a collection by a predicate.
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.AtIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Get element at index or default.
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.AddUnique``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items to a list, which are not already in the list. Compares with Equal().
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.AddUnique``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            Adds items to a list, which are not already in the list. Types can be different. Compares with Equal() of <typeparamref name="T1"/>.
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.AddUnique2``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            Adds items to a list, which are not already in the list. Types can be different. Compares with Equal() of <typeparamref name="T2"/>.
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns itself, if value is an array. Otherwise creates a new array.
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns itself, if value is a list. Otherwise creates a new list.
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.Append``1(``0[],``0[])">
            <summary>Appends objects on array.</summary>
        </member>
        <member name="M:Shared.Collections.Collection.AppendAndReplace``1(``0[]@,``0[])">
            <summary>Appends objects on array and overwrites the original.</summary>
        </member>
        <member name="M:Shared.Collections.Collection.AppendAndReplace``1(``0[]@,System.Collections.Generic.IEnumerable{``0})">
            <summary>Appends objects on array and overwrites the original.</summary>
        </member>
        <member name="M:Shared.Collections.Collection.Ensure``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            Get dictionary by key and create new value with standard constructor, if it did not exist.
            </summary>
            <returns>true if new value was created</returns>
        </member>
        <member name="M:Shared.Collections.Collection.GetList">
            <summary>
            Gets a static list object. Do not save reference.
            Call <b>Flush&lt;T&gt;()</b> to receive output.
            </summary>
        </member>
        <member name="M:Shared.Collections.Collection.Flush``1">
            <summary>
            Use when finished with <b>GetList()</b>
            </summary>
        </member>
        <member name="T:Shared.Consoles.Console">
            <summary>
            Functions for use in console applications.<br/>
            - manipulate console output<br/>
            - manage processes<br/>
            - manage drives<br/>
            </summary>
        </member>
        <member name="M:Shared.Consoles.Console.RunCommand(System.String,System.String,System.String@,System.Action{System.String},System.Diagnostics.ProcessPriorityClass)">
            <summary>
            Runs command or program. Blocks execution until finished.
            </summary>
            <param name="command">Command or program path.</param>
            <param name="args">Process arguments to use.</param>
            <param name="output">Console text output.</param>
            <param name="onData">Data receive action.</param>
            <param name="priority">Process prioirty.</param>
            <returns>Process exit code</returns>
        </member>
        <member name="M:Shared.Consoles.Console.RunCommandAsync(System.String,System.String,System.Action{System.String},System.Boolean,System.Diagnostics.ProcessPriorityClass)">
            <summary>
            Runs command or program.
            </summary>
            <param name="command">Command or program path.</param>
            <param name="args">Process arguments to use.</param>
            <param name="onData">Data receive action. Prints to console, if empty.</param>
            <param name="startNow">Whenever to start the process immediately.</param>
            <param name="priority">Process prioirty, only if startNow is true.</param>
            <returns>Process thread</returns>
        </member>
        <member name="M:Shared.Consoles.Console.RunAdmin(System.String)">
            <summary>
            Run the current assembly as admin. Force exists application.
            </summary>
        </member>
        <member name="M:Shared.Consoles.Console.GetCursorPosition">
            <summary>
            Get current cursor position from console window.
            In .Net 5 > use System.Console.GetCursorPosition
            </summary>
            <returns>Cursor position</returns>
        </member>
        <member name="M:Shared.Consoles.Console.GetConsoleInfo">
            <summary>
            Retrieves information about the current screen buffer window
            </summary>
        </member>
        <member name="M:Shared.Consoles.Console.IndexOfInConsole(System.String)">
            <summary>
            Find text in console window
            </summary>
            <returns>List of found coordinates</returns>
        </member>
        <member name="M:Shared.Consoles.Console.IndexOfInConsole(System.String[])">
            <summary>
            Find texts in console window
            </summary>
            <param name="text"></param>
            <returns>List of found coordinates</returns>
        </member>
        <member name="M:Shared.Consoles.Console.GetChar(Shared.Consoles.Console.COORD,System.IntPtr)">
            <summary>
            Retrieve character from console window
            </summary>
        </member>
        <member name="M:Shared.Consoles.Console.GetChar(System.Int32,System.Int32,System.Char@)">
            <summary>
            Retrieve character from console window
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:Shared.Consoles.Console.GetText(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Retrieve text from console window.<br/>
            No length will return until end of line.<br/>
            Length below zero will return until cursor position.
            </summary>
        </member>
        <member name="M:Shared.Consoles.Console.ReadConsoleOutputCharacterA(System.IntPtr,System.Byte@,System.Int32,Shared.Consoles.Console.COORD,System.Int32@)">
            <param name="hStdout">result of 'GetStdHandle(-11)'</param>
            <param name="ch">A̲N̲S̲I̲ character result</param>
            <param name="c_in">set to '1'</param>
            <param name="coord_XY"> screen location to read, X:loword, Y:hiword</param>
            <param name="c_out">(unwanted, discard)</param>
            <returns>false if error</returns>
        </member>
        <member name="M:Shared.Consoles.Console.ReadConsoleOutputCharacterW(System.IntPtr,System.Char@,System.Int32,Shared.Consoles.Console.COORD,System.Int32@)">
            <param name="hStdout">result of 'GetStdHandle(-11)'</param>
            <param name="ch">U̲n̲i̲c̲o̲d̲e̲ character result</param>
            <param name="c_in">set to 'sizeof(char)'</param>
            <param name="coord_XY">screen location to read, X:loword, Y:hiword</param>
            <param name="c_out">sizeof(char) or 1 if second part of a wide character</param>
            <returns>false if error</returns>
        </member>
        <member name="M:Shared.Consoles.Console.WriteConsoleOutputCharacterW(System.IntPtr,System.Char,System.Int32,Shared.Consoles.Console.COORD,System.Int32@)">
            <summary>
            
            </summary>
            <param name="hStdout">result of 'GetStdHandle(-11)'</param>
            <param name="ch">U̲n̲i̲c̲o̲d̲e̲ character to write</param>
            <param name="c_in">set to 'sizeof(char)'</param>
            <param name="coord_XY">screen location to write, X:loword, Y:hiword</param>
            <param name="c_out">returns sizeof(char) if successful</param>
            <returns></returns>
        </member>
        <member name="M:Shared.Consoles.Console.SetVolumeMountPointW(System.String,System.String)">
            <param name="lpszVolumeMountPoint">Y:\MountX</param>
            <param name="lpszVolumeName">\\?\Volume{00000000-0000-0000-0000-000000000000}\</param>
        </member>
        <member name="T:Shared.Loggers.Logger">
            <summary>
            Methods to print to standard output.
            </summary>
        </member>
        <member name="M:Shared.Loggers.Logger.PrintDebug(System.String,System.String)">
            <summary>
            Only prints in DEBUG.
            </summary>
        </member>
        <member name="M:Shared.Loggers.Logger.Print(System.String)">
            <summary>
            Prints to standard output.
            </summary>
        </member>
        <member name="M:Shared.Loggers.Logger.PrintWarning(System.String,System.String)">
            <summary>
            Prints to standard output.
            </summary>
        </member>
        <member name="M:Shared.Loggers.Logger.PrintError(System.String,System.String)">
            <summary>
            Prints to standard output.
            </summary>
        </member>
        <member name="M:Shared.Loggers.Logger.PrintException(System.Exception)">
            <summary>
            Prints to standard output.
            </summary>
        </member>
        <member name="T:Shared.Paths.PathInfo">
            <summary>
            WIP. Tool to handle path operations.
            </summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.Username">
            <summary>%username%</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.UserProfile">
            <summary>C:\Users\%username%</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.DesktopDirectory">
            <summary>C:\Users\%username%\Desktop</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.ProgramFiles">
            <summary>C:\Program Files</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.ProgramFilesX86">
            <summary>C:\Program Files (x86)</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.MyDocuments">
            <summary>C:\Users\%username%\OneDrive - Bruker Physik GmbH\Documents</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.MyPictures">
            <summary>C:\Users\%username%\Pictures</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.MyMusic">
            <summary>C:\Users\%username%\Music</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.MyVideos">
            <summary>C:\Users\%username%\Videos</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.ApplicationData">
            <summary>C:\Users\%username%\AppData\Roaming</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.LocalApplicationData">
            <summary>C:\Users\%username%\AppData\Local</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.CommonApplicationData">
            <summary>C:\ProgramData</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.System">
            <summary>C:\WINDOWS\system32</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.SystemX86">
            <summary>C:\WINDOWS\SysWOW64</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.Startup">
            <summary>C:\Users\%username%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</summary>
        </member>
        <member name="P:Shared.Paths.PathHelper.Desktop">
            <summary>C:\Users\%username%\Desktop<br/>Prefer DesktopDirectory instead.</summary>
        </member>
        <member name="T:Shared.Serialize.SerializationTool">
            <summary>
            Tool to handle (de-)serialization.
            </summary>
        </member>
        <member name="M:Shared.Strings.String.JoinArgs(System.String[])">
            <summary>
            Joins an array of arguments into a single string, which can be used for commands.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.Strings.String.FilterPath(System.String)">
            <summary>
            Converts string into valid absolute path.<br/>
            Returns null, if invalid path (e.g. illegal characters).
            </summary>
        </member>
        <member name="M:Shared.Strings.String.ExpandWindowsVolume(System.String)">
            <summary>
            Returns to windows style volume expanded string "C:\".
            Otherwise returns input string.
            </summary>
        </member>
        <member name="M:Shared.Strings.String.PathExists(System.String)">
            <summary>
            Checks for files or directories.
            </summary>
        </member>
        <member name="M:Shared.Strings.String.GetUniqueFilename(System.String)">
            <summary>
            Returns file path that does not exist. Appends (1) or increases existing numberation, if file already exists.
            </summary>
        </member>
        <member name="M:Shared.Strings.String.ToLiteral(System.String)">
            <summary>
            Escapes Unicode and ASCII non printable characters
            </summary>
            <param name="input">The string to convert</param>
            <returns>An escaped string literal</returns>
        </member>
        <member name="M:Shared.Strings.String.Join``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
             <summary>Joins an enumeration with a value converter and a delimiter to a string</summary>
             <typeparam name="T">The inner type of the enumeration</typeparam>
             <param name="enumeration">The enumeration</param>
             <param name="converter">An optional value converter (from T to string)</param>
             <param name="delimiter">An optional delimiter</param>
             <returns>The values joined into a string</returns>
            
        </member>
        <member name="M:Shared.Strings.String.TrySubstring(System.String,System.Char,System.Int32,System.Boolean)">
            <summary>Returns substring. Always excludes char 'c'. Returns null, if index is out of range or char not found.</summary>
            <param name="str">source string</param>
            <param name="c">char to search for</param>
            <param name="start">start index; negative number search last index instead</param>
            <param name="tail">get tail instead of head</param>
        </member>
        <member name="T:Shared.Strings.String.RegexEvaluator">
            <summary>
            Evaluator for Regex.Replace extension.
            </summary>
        </member>
        <member name="M:Shared.Strings.String.Replace(System.Text.RegularExpressions.Regex,System.String,Shared.Strings.String.RegexEvaluator)">
            <summary>
            Regex.Replace, but with additional index and count values.
            </summary>
        </member>
    </members>
</doc>
